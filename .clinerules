# Project Understanding Rules

When starting work on this project:

1. First, read and understand the codebase by exploring the directory structure
2. Use `tree` command excluding large directories (node_modules, etc.)
3. Read `docs/llm-context.md` to understand previous learnings about the project
4. **Read `docs/architecture.md` as the primary project specification** - this document contains the complete technical specification, feature requirements, and implementation guidelines that must be followed
5. Summarize your understanding of the project structure and purpose
6. Update `docs/llm-context.md` with new insights when completing tasks

## Implementation Rules

- **Always follow `docs/architecture.md`** - this is the authoritative project specification and must be adhered to for all implementation decisions
- All code implementation must align with the architecture, specifications, and requirements defined in `docs/architecture.md`
- When adding new features or making changes, ensure they comply with the design patterns, coding standards, and technical requirements outlined in the architecture document
- If there are conflicts between ad-hoc requests and the architecture document, prioritize the architecture document and clarify with the user

Always maintain context about the project's architecture and purpose as defined in the specification.

## Language and Communication Rules

- **回答は必ず日本語で返すこと** - All responses must be provided in Japanese language

## Workflow Efficiency Rules

- **After receiving tool results, carefully reflect on their quality and determine optimal next steps before proceeding.** Use your thinking to plan and iterate based on this new information, and then take the best next action.
- **For maximum efficiency, whenever you need to perform multiple independent operations, invoke all relevant tools simultaneously rather than sequentially.**

# Comment Writing Rules

## Comment Format
- Use language-standard comment symbols (JavaScript/TypeScript: `//`, Python: `#`, etc.)
- Non-standard symbols like `///` are prohibited
- All comments must be written in Japanese
- Translate English comments to Japanese

## Comment Content Rules

### Comments to Include
- **Why the code was written** - reasons and background
- Business logic and rule explanations
- External dependencies and constraint explanations
- Important notes for future developers
- Performance and security considerations
- Intent and purpose of complex algorithms

### Prohibited Comments
- Comments that simply describe what the code does
- Simple descriptions of implementation details
- Obviously unnecessary explanations
- Outdated or incorrect information
- Descriptions of content obviously clear from variable or function names

## Comment Quality Standards
- Write only information that can be understood without reading the code
- Focus on "why" rather than "what"
- Include only information that remains valid even when implementation changes
- Use concise and specific expressions

## Format Rules
- Place appropriate blank lines before and after comments
- Match indentation to code level
- Use consistent notation for multi-line comments